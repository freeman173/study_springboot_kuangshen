理论：
	为了完成单个计算机无法完成的任务，多个计算机通过网络结合在一起来完成。



Dubbo：
	Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：
		面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。
主要核心部件
 Remoting: 网络通信框架，实现了 sync-over-async 和 request-response 消息机制.
RPC: 一个远程过程调用的抽象，支持负载均衡、容灾和集群功能
Registry: 服务目录框架用于服务的注册和服务事件发布和订阅



RPC 和 HTTP 就不是一个层级的东西

RPC 对比的是本地过程调用，是用来作为分布式系统之间的通信，它可以用 HTTP 来传输，也可以基于 TCP 自定义协议传输。

RPC的两个核心模块：序列化（为了方便通信）、通信



简单来说zookeeper=文件系统+监听通知机制。
客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，
zookeeper会通知客户端。

zookeeper功能非常强大，可以实现诸如分布式应用配置管理、统一命名服务、状态同步服务、集群管理等功能。


dubbo本身是一个jar包，可以帮助springboot连接到zookeeper。


使用步骤：
	前提：开启zookeeper

	1、提供者提供服务
		1、导入依赖
·		2、在application.yaml中配置服务地址……
		3、在service的服务商添加@service（dubbo）
	2、消费
		1、导入依赖
		2、配置注册中心地址
		3、从远程注入服务 @reference

	


总结：consumer这块出问题了，不过我不想调试，等到后面真正需要时再来弄吧！！
