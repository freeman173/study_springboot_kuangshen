当前学习：
    spring boot:
        对数据库的crud；
        分布式开发；
        ……

    spring cloud：
        多个微服务的集成；


    linux：
        将项目部署到服务器端；




spring boot

    spring boot 优点：
        爽爽！！

    微服务：
        将一个项目的业务拆分为许多小模块，需要时就调出。

    项目所建包必须跟启动类同级！！


    pom.xml文件中包含了项目的配置文件：
        依赖项中的启动器将对应的功能场景对应起来，只要引入了对应启动器就可以使用对应场景功能。


    springboot所有的自动配置都是在启动时扫描并加载：只要在pom文件中导入了相关场景的启动器，自动装配就会生效。
        在spring框架中需要手动配置的东西，spring boot 框架自动帮我们配置了。
        自动配置的方案都在spring-boot-autoconfigure-…….jar包下。


    在业务中，给对象传值：
                传一个属性：使用value注解
                传多个：使用yaml配置


    数据校验：
        使用@validated来校验数据


spring boot web开发要解决的问题：
    导入静态资源
    首页
    jsp，模板引擎themeleaf
    装配springmvc
    crud操作
    拦截器
    国际化

    导入静态资源：
        静态资源的三个存放位置优先级：
            resources、static、public

        访问方式：localhost:8080/……


    templates中的.html文件：通过controller中的匹配才能访问。（需要配置themeleaf依赖。）

    通过使用thymeleaf模板引擎（在pom中导入依赖即可），我们将html页面放到templates目录下就可以了。（可以查看源码更改配置的）



    添加员工的流程：
        点击按钮提交添加页面；
        添加信息成功并跳转回list页面。

    可以直接在template的error放入404页面，如果用户访问出错，框架将会自动跳转到404页面。



2022.3.29:
    springboot的简单crud操作终于完成。


制作一个网站流程：
    1、前端页面设计：页面长什么样子，需要哪些数据；让前端可以自己运行一下。
    2、设计数据库（难点）
    3、数据接口做一个对接（使用json模拟数据）
    4、前后端联动调试。


储备：
    1、有一套自己的后台模板
    2、前端界面：
            index、about、……。
    3、部署网站，让其能运行。




mybatis整合流程：
    1、在pom中引入包：
    2、准备工作：
        编写Polo类对应数据库的表；
        编写mapper接口类，在resource中根据mapper接口的方法编写mapperxml文件；
        在application.xml中配置属性将接口类与xml文件对应起来。
    3、service调用dao、controller调用service


把mybatis整合到该项目中去
    员工表放入数据库，部门表也放入数据库，两者不需要做拼接。
    在页面层拼接即可。

    最终进度：除了更新与添加的前端页面未改动之外（没有太大必要改动），其余的部分均与mybatis整合成功。









